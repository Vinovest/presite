{"version":3,"sources":["screens/satisfaction/index.js","shared/components/MetaTagsReplacer.js"],"names":["Section","styled","section","TopTitle","PDescription","Satisfaction","title","description","as","backUpDevice","get","document","querySelector","backUpSocialDescriptions","reduce","acc","tagSelector","getMeta","backUpSocialTitles","node","content","createNode","createElement","setAttribute","setMetaContent","metaTag","getElementsByTagName","appendChild","resetMetaContent","head","removeChild","err","MetaTagsReplacer","React","useEffect","titleNode","descriptionNode","innerHTML","Object","values","forEach"],"mappings":"oIAAA,oDAKA,MAsBMA,EAAUC,IAAOC,OAAQ;;;;;MAKzBC;;;;;MAKAC;;;;;;;;;UASIA;;;;;UAKAA;;;;EAKKC,UAnDM,IACjB,kBAACL,EAAD,KACI,kBAAC,IAAD,CACIM,MAAM,sCACNC,YAAY,+LAGhB,kBAAC,IAAD,CAAUC,GAAG,MAAb,eAEI,6BAFJ,0BAKA,kBAAC,IAAD,oGAGA,kBAAC,IAAD,4N,iCCpBR,2BAGA,MAAMC,EAAe,CACjBH,MAAOI,cAAIC,SAASC,cAAc,SAAU,aAC5CL,YAAaG,cAAIC,SAASC,cAAc,wBAAyB,YAG/DC,EAA2B,CAAC,iBAAkB,uBAAuBC,QACvE,CAACC,EAAKC,KAAN,IAA4BD,EAAK,CAACC,GAAcC,EAAQD,MACxD,IAEEE,EAAqB,CAAC,WAAY,iBAAiBJ,QACrD,CAACC,EAAKC,KAAN,IAA4BD,EAAK,CAACC,GAAcC,EAAQD,MACxD,IA0BJ,SAASC,EAAQD,GACb,MAAMG,EAAOR,SAASC,cAAe,cAAaI,OAClD,GAAIG,EACA,MAAO,CAAEA,OAAMC,QAASV,cAAIS,EAAM,WAAYH,eAGlD,MAAMK,EAAaV,SAASW,cAAc,QAI1C,OAHAD,EAAWE,aAAa,WAAYP,GACpCK,EAAWE,aAAa,UAAW,IAE5B,CAAEF,aAAYL,eAGzB,MAAMQ,EAAkBJ,GAAaK,IAC7BA,EAAQN,KACRM,EAAQN,KAAKC,QAAUA,GAAWK,EAAQN,KAAKC,SAE/CT,SAASe,qBAAqB,QAAQ,GAAGC,YAAYF,EAAQJ,YAC7DI,EAAQJ,WAAWD,QAAUA,IAI/BQ,EAAmB,IAAOH,IAC5B,GAAIA,EAAQN,KACRM,EAAQN,KAAKC,QAAUK,EAAQL,aAE/B,IACIT,SAASkB,KAAKC,YAAYL,EAAQJ,YACpC,MAAOU,MAIFC,IAvDU,EAAG1B,QAAOC,kBAC/B0B,IAAMC,WAAU,KACZ,MAAMC,EAAYxB,SAASC,cAAc,SACnCwB,EAAkBzB,SAASC,cAAc,wBAQ/C,OANAuB,EAAUE,UAAY/B,GAASG,EAAaH,MAC5C8B,EAAgBhB,QAAUb,GAAeE,EAAaF,YAEtD+B,OAAOC,OAAOrB,GAAoBsB,QAAQhB,EAAelB,IACzDgC,OAAOC,OAAO1B,GAA0B2B,QAAQhB,EAAejB,IAExD,KACH4B,EAAUE,UAAY5B,EAAaH,MACnC8B,EAAgBhB,QAAUX,EAAaF,YAEvC+B,OAAOC,OAAOrB,GAAoBsB,QAAQZ,KAC1CU,OAAOC,OAAO1B,GAA0B2B,QAAQZ,QAErD,CAACrB,EAAaD,IAEV","file":"static/js/44.cc2e7a8d.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { TopTitle, PDescription } from \"#shared/ui/Typography/styled\";\nimport MetaTagsReplacer from \"#shared/components/MetaTagsReplacer\";\n\nconst Satisfaction = () => (\n    <Section>\n        <MetaTagsReplacer\n            title=\"The Vinovest Satisfaction Guarantee\"\n            description=\"As an organization, we're committed to bringing excellence to the customer experience in every way we possible can, including serving our user base with the urgency and care you deserve.\"\n        />\n\n        <TopTitle as=\"h1\">\n            The Vinovest\n            <br />\n            Satisfaction Guarantee\n        </TopTitle>\n        <PDescription>\n            At Vinovest, we are committed to providing our customers with a great investing experience.\n        </PDescription>\n        <PDescription>\n            If, for any reason, you are not completely satisfied with your Vinovest account, we will do everything we\n            can to make it right, up to and including waiving Vinovestâ€™s management fees for the next 90 days.\n        </PDescription>\n    </Section>\n);\n\nconst Section = styled.section`\n    padding: 100px 8.888% 100px;\n    align-items: center;\n    display: flex;\n    flex-direction: column;\n    ${TopTitle} {\n        font-size: 48px;\n        line-height: 56px;\n        margin-bottom: 70px;\n    }\n    ${PDescription} {\n        margin-bottom: 10px;\n        width: 100%;\n        max-width: 585px;\n        text-align: start;\n        font-size: 20px;\n        line-height: 160%;\n    }\n    @media screen and (max-width: 768px) {\n        ${PDescription} {\n            max-width: 511px;\n        }\n    }\n    @media screen and (max-width: 767px) {\n        ${PDescription} {\n            font-size: 18px;\n        }\n    } ;\n`;\nexport default Satisfaction;\n","import React from \"react\";\nimport { get } from \"lodash\";\n\nconst backUpDevice = {\n    title: get(document.querySelector(\"title\"), \"innerText\"),\n    description: get(document.querySelector('[name=\"description\"]'), \"content\"),\n};\n\nconst backUpSocialDescriptions = [\"og:description\", \"twitter:description\"].reduce(\n    (acc, tagSelector) => ({ ...acc, [tagSelector]: getMeta(tagSelector) }),\n    {},\n);\nconst backUpSocialTitles = [\"og:title\", \"twitter:title\"].reduce(\n    (acc, tagSelector) => ({ ...acc, [tagSelector]: getMeta(tagSelector) }),\n    {},\n);\n\nconst MetaTagsReplacer = ({ title, description }) => {\n    React.useEffect(() => {\n        const titleNode = document.querySelector(\"title\");\n        const descriptionNode = document.querySelector('[name=\"description\"]');\n\n        titleNode.innerHTML = title || backUpDevice.title;\n        descriptionNode.content = description || backUpDevice.description;\n\n        Object.values(backUpSocialTitles).forEach(setMetaContent(title));\n        Object.values(backUpSocialDescriptions).forEach(setMetaContent(description));\n\n        return () => {\n            titleNode.innerHTML = backUpDevice.title;\n            descriptionNode.content = backUpDevice.description;\n\n            Object.values(backUpSocialTitles).forEach(resetMetaContent());\n            Object.values(backUpSocialDescriptions).forEach(resetMetaContent());\n        };\n    }, [description, title]);\n\n    return null;\n};\n\nfunction getMeta(tagSelector) {\n    const node = document.querySelector(`[property=\"${tagSelector}\"]`);\n    if (node) {\n        return { node, content: get(node, \"content\"), tagSelector };\n    }\n\n    const createNode = document.createElement(\"meta\");\n    createNode.setAttribute(\"property\", tagSelector);\n    createNode.setAttribute(\"content\", \"\");\n\n    return { createNode, tagSelector };\n}\n\nconst setMetaContent = (content) => (metaTag) => {\n    if (metaTag.node) {\n        metaTag.node.content = content || metaTag.node.content;\n    } else {\n        document.getElementsByTagName(\"head\")[0].appendChild(metaTag.createNode);\n        metaTag.createNode.content = content;\n    }\n};\n\nconst resetMetaContent = () => (metaTag) => {\n    if (metaTag.node) {\n        metaTag.node.content = metaTag.content;\n    } else {\n        try {\n            document.head.removeChild(metaTag.createNode);\n        } catch (err) {}\n    }\n};\n\nexport default MetaTagsReplacer;\n"],"sourceRoot":""}