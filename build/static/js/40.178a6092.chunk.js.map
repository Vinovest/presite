{"version":3,"sources":["screens/contact-support/index.js","shared/components/MetaTagsReplacer.js"],"names":["ContactSupport","observer","s","useRootStore","wasSubmitted","setWasSubmitted","React","useState","fields","setFields","email","Name","Phone","Question","history","useHistory","onChange","target","f","name","value","ContactSupportContainer","title","className","FormWrapper","onSubmit","e","preventDefault","tracking","gtm","contactUsForm","id","type","maxLength","placeholder","required","Back","onClick","push","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","styled","div","HeroTitle","HeroDescription","button","backUpDevice","get","document","querySelector","description","backUpSocialDescriptions","reduce","acc","tagSelector","getMeta","backUpSocialTitles","node","content","createNode","createElement","setAttribute","setMetaContent","metaTag","getElementsByTagName","appendChild","resetMetaContent","head","removeChild","err","MetaTagsReplacer","useEffect","titleNode","descriptionNode","innerHTML","Object","values","forEach"],"mappings":"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","file":"static/js/40.178a6092.chunk.js","sourcesContent":["import React from \"react\";\nimport styled from \"styled-components\";\nimport { observer } from \"mobx-react-lite\";\nimport { useHistory } from \"react-router-dom\";\nimport { HeroTitle, HeroDescription } from \"#shared/ui/Typography/styled\";\nimport { useRootStore } from \"#shared/hooks\";\nimport MetaTagsReplacer from \"#shared/components/MetaTagsReplacer\";\n\nconst ContactSupport = observer(() => {\n    const s = useRootStore();\n    const [wasSubmitted, setWasSubmitted] = React.useState(false);\n\n    const [fields, setFields] = React.useState({\n        email: \"\",\n        Name: \"\",\n        Phone: \"\",\n        Question: \"\",\n    });\n\n    const history = useHistory();\n\n    const onChange = ({ target }) => setFields((f) => ({ ...f, [target.name]: target.value }));\n\n    const onSubmit = (e) => {\n        e.preventDefault();\n        setWasSubmitted(true);\n        s.tracking.gtm.contactUsForm({ ...fields, id: fields.email });\n    };\n\n    return (\n        <ContactSupportContainer>\n            <MetaTagsReplacer title=\"Contact Us\" />\n\n            <HeroTitle>Contact Us</HeroTitle>\n            <HeroDescription>\n                If you are a Premium or Grand Cru member, please contact your dedicated Portfolio Advisor directly.\n            </HeroDescription>\n\n            {wasSubmitted ? (\n                <HeroDescription className=\"thanksMessage\">\n                    Thank you! Your submission has been received!\n                </HeroDescription>\n            ) : (\n                <FormWrapper>\n                    <form onSubmit={onSubmit}>\n                        <label className=\"contact-form-label\">FULL NAME</label>\n                        <input\n                            type=\"text\"\n                            className=\"contactInput\"\n                            maxLength=\"256\"\n                            placeholder=\"Name\"\n                            required\n                            value={fields.Name}\n                            name=\"Name\"\n                            onChange={onChange}\n                        />\n                        <label className=\"contact-form-label\">Email</label>\n                        <input\n                            type=\"email\"\n                            className=\"contactInput\"\n                            maxLength=\"256\"\n                            placeholder=\"Email\"\n                            required\n                            value={fields.email}\n                            name=\"email\"\n                            onChange={onChange}\n                        />\n                        <label className=\"contact-form-label\">Phone Number</label>\n                        <input\n                            type=\"tel\"\n                            className=\"contactInput\"\n                            maxLength=\"256\"\n                            data-name=\"Phone\"\n                            placeholder=\"(___) ___ - ____\"\n                            value={fields.Phone}\n                            name=\"Phone\"\n                            onChange={onChange}\n                        />\n                        <label className=\"contact-form-label\">Message</label>\n                        <textarea\n                            placeholder=\"Briefly describe your question...\"\n                            maxLength=\"5000\"\n                            required\n                            className=\"contactInput contact-form-textarea\"\n                            value={fields.Question}\n                            name=\"Question\"\n                            onChange={onChange}\n                        />\n                        <input type=\"submit\" value=\"SUBMIT\" className=\"submit\" />\n                    </form>\n                </FormWrapper>\n            )}\n            <Back onClick={() => history.push(\"/contact-us\")}>\n                <svg width=\"25\" height=\"16\" viewBox=\"0 0 25 16\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\n                    <path\n                        d=\"M8 15L1 8M1 8L8 1M1 8H23.5\"\n                        stroke=\"#242E35\"\n                        strokeWidth=\"2\"\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                    />\n                </svg>\n            </Back>\n        </ContactSupportContainer>\n    );\n});\n\nconst ContactSupportContainer = styled.div`\n    padding: 120px 0 100px;\n    color: #242e35;\n    text-align: center;\n\n    ${HeroTitle} {\n        font-size: 64px;\n        line-height: 70px;\n        font-weight: 500;\n        letter-spacing: 2px;\n    }\n\n    ${HeroDescription} {\n        margin: 24px auto 40px;\n        max-width: 550px;\n        width: fit-content;\n        font-family: Favoritstd, sans-serif;\n        color: #242e35;\n        font-size: 20px;\n        line-height: 160%;\n        font-weight: 500;\n\n        padding-right: 40px;\n        padding-left: 40px;\n\n        &.thanksMessage {\n            padding: 20px;\n            text-align: center;\n            max-width: 380px;\n        }\n    }\n`;\n\nconst FormWrapper = styled.div`\n    max-width: 462px;\n    width: 100%;\n    margin: 0 auto;\n    text-align: left;\n    padding-right: 40px;\n    padding-left: 40px;\n\n    .contactInput {\n        height: 50px;\n        margin-bottom: 22px;\n        border: solid 1px #caccce;\n        display: block;\n        margin-bottom: 25px;\n        background-color: #fff;\n        font-family: VinovestMedium, sans-serif;\n        font-weight: 400;\n        padding: 8px 12px;\n        outline: 0;\n        width: 100%;\n        color: #242424;\n        font-size: 20px;\n\n        &::placeholder {\n            color: #a8abad;\n            font-weight: 200;\n            font-size: 16px;\n            line-height: 26px;\n            font-family: Favoritstd book, sans-serif;\n        }\n    }\n\n    .contact-form-label {\n        font-family: Favoritmonostd, sans-serif;\n        font-size: 11px;\n        line-height: 16px;\n        font-weight: 500;\n        letter-spacing: 0.7px;\n        text-transform: uppercase;\n        text-align: left;\n        display: block;\n        margin-bottom: 5px;\n    }\n\n    .contact-form-textarea {\n        height: 150px;\n    }\n\n    .submit {\n        width: 100%;\n        height: 50px;\n        padding-top: 9px;\n        padding-bottom: 9px;\n        font-family: Favoritmonostd, sans-serif;\n        font-size: 16px;\n        width: 100%;\n        border-color: #a86d37;\n        background-color: #a86d37;\n        color: #fff;\n        border: 0;\n        outline: 0;\n        transition: 0.3s;\n\n        &:hover {\n            opacity: 0.7;\n            cursor: pointer;\n        }\n    }\n`;\n\nconst Back = styled.button`\n    position: fixed;\n    width: 60px;\n    height: 60px;\n    left: 7.749vw;\n    top: 40%;\n    border: 2px solid #eeeeee;\n    box-sizing: border-box;\n    background: transparent;\n    outline: 0;\n\n    &:hover {\n        cursor: pointer;\n    }\n\n    @media screen and (max-width: 1024px) {\n        left: 2.749vw;\n    }\n\n    @media screen and (max-width: 1023px) {\n        position: fixed;\n        z-index: 999;\n        top: 0;\n        height: 80px;\n        left: 10px;\n        background: white;\n        border: 0;\n    }\n`;\n\nexport default ContactSupport;\n","import React from \"react\";\nimport { get } from \"lodash\";\n\nconst backUpDevice = {\n    title: get(document.querySelector(\"title\"), \"innerText\"),\n    description: get(document.querySelector('[name=\"description\"]'), \"content\"),\n};\n\nconst backUpSocialDescriptions = [\"og:description\", \"twitter:description\"].reduce(\n    (acc, tagSelector) => ({ ...acc, [tagSelector]: getMeta(tagSelector) }),\n    {},\n);\nconst backUpSocialTitles = [\"og:title\", \"twitter:title\"].reduce(\n    (acc, tagSelector) => ({ ...acc, [tagSelector]: getMeta(tagSelector) }),\n    {},\n);\n\nconst MetaTagsReplacer = ({ title, description }) => {\n    React.useEffect(() => {\n        const titleNode = document.querySelector(\"title\");\n        const descriptionNode = document.querySelector('[name=\"description\"]');\n\n        titleNode.innerHTML = title || backUpDevice.title;\n        descriptionNode.content = description || backUpDevice.description;\n\n        Object.values(backUpSocialTitles).forEach(setMetaContent(title));\n        Object.values(backUpSocialDescriptions).forEach(setMetaContent(description));\n\n        return () => {\n            titleNode.innerHTML = backUpDevice.title;\n            descriptionNode.content = backUpDevice.description;\n\n            Object.values(backUpSocialTitles).forEach(resetMetaContent());\n            Object.values(backUpSocialDescriptions).forEach(resetMetaContent());\n        };\n    }, [description, title]);\n\n    return null;\n};\n\nfunction getMeta(tagSelector) {\n    const node = document.querySelector(`[property=\"${tagSelector}\"]`);\n    if (node) {\n        return { node, content: get(node, \"content\"), tagSelector };\n    }\n\n    const createNode = document.createElement(\"meta\");\n    createNode.setAttribute(\"property\", tagSelector);\n    createNode.setAttribute(\"content\", \"\");\n\n    return { createNode, tagSelector };\n}\n\nconst setMetaContent = (content) => (metaTag) => {\n    if (metaTag.node) {\n        metaTag.node.content = content || metaTag.node.content;\n    } else {\n        document.getElementsByTagName(\"head\")[0].appendChild(metaTag.createNode);\n        metaTag.createNode.content = content;\n    }\n};\n\nconst resetMetaContent = () => (metaTag) => {\n    if (metaTag.node) {\n        metaTag.node.content = metaTag.content;\n    } else {\n        try {\n            document.head.removeChild(metaTag.createNode);\n        } catch (err) {}\n    }\n};\n\nexport default MetaTagsReplacer;\n"],"sourceRoot":""}